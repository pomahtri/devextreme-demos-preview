import { __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { forwardRef, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, HostListener, Component, NgModule } from '@angular/core';
import DxFileUploader from 'devextreme/ui/file_uploader';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';

/*!
 * devextreme-angular
 * Version: 21.2.1-alpha-21124-0324
 * Build date: Tue May 04 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
const CUSTOM_VALUE_ACCESSOR_PROVIDER = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DxFileUploaderComponent),
    multi: true
};
/**
 * The FileUploader UI component enables an end user to upload files to the server. An end user can select files in the file explorer or drag and drop files to the FileUploader area on the page.

 */
let DxFileUploaderComponent = class DxFileUploaderComponent extends DxComponent {
    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);
        this._watcherHelper = _watcherHelper;
        this._idh = _idh;
        this.touched = (_) => { };
        this._createEventEmitters([
            { subscribe: 'beforeSend', emit: 'onBeforeSend' },
            { subscribe: 'contentReady', emit: 'onContentReady' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'dropZoneEnter', emit: 'onDropZoneEnter' },
            { subscribe: 'dropZoneLeave', emit: 'onDropZoneLeave' },
            { subscribe: 'filesUploaded', emit: 'onFilesUploaded' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'progress', emit: 'onProgress' },
            { subscribe: 'uploadAborted', emit: 'onUploadAborted' },
            { subscribe: 'uploaded', emit: 'onUploaded' },
            { subscribe: 'uploadError', emit: 'onUploadError' },
            { subscribe: 'uploadStarted', emit: 'onUploadStarted' },
            { subscribe: 'valueChanged', emit: 'onValueChanged' },
            { emit: 'abortUploadChange' },
            { emit: 'acceptChange' },
            { emit: 'accessKeyChange' },
            { emit: 'activeStateEnabledChange' },
            { emit: 'allowCancelingChange' },
            { emit: 'allowedFileExtensionsChange' },
            { emit: 'chunkSizeChange' },
            { emit: 'dialogTriggerChange' },
            { emit: 'disabledChange' },
            { emit: 'dropZoneChange' },
            { emit: 'elementAttrChange' },
            { emit: 'focusStateEnabledChange' },
            { emit: 'heightChange' },
            { emit: 'hintChange' },
            { emit: 'hoverStateEnabledChange' },
            { emit: 'inputAttrChange' },
            { emit: 'invalidFileExtensionMessageChange' },
            { emit: 'invalidMaxFileSizeMessageChange' },
            { emit: 'invalidMinFileSizeMessageChange' },
            { emit: 'isValidChange' },
            { emit: 'labelTextChange' },
            { emit: 'maxFileSizeChange' },
            { emit: 'minFileSizeChange' },
            { emit: 'multipleChange' },
            { emit: 'nameChange' },
            { emit: 'progressChange' },
            { emit: 'readOnlyChange' },
            { emit: 'readyToUploadMessageChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'selectButtonTextChange' },
            { emit: 'showFileListChange' },
            { emit: 'tabIndexChange' },
            { emit: 'uploadAbortedMessageChange' },
            { emit: 'uploadButtonTextChange' },
            { emit: 'uploadChunkChange' },
            { emit: 'uploadCustomDataChange' },
            { emit: 'uploadedMessageChange' },
            { emit: 'uploadFailedMessageChange' },
            { emit: 'uploadFileChange' },
            { emit: 'uploadHeadersChange' },
            { emit: 'uploadMethodChange' },
            { emit: 'uploadModeChange' },
            { emit: 'uploadUrlChange' },
            { emit: 'validationErrorChange' },
            { emit: 'validationErrorsChange' },
            { emit: 'validationStatusChange' },
            { emit: 'valueChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' },
            { emit: 'onBlur' }
        ]);
        this._idh.setHost(this);
        optionHost.setHost(this);
    }
    /**
     * 
    
     */
    get abortUpload() {
        return this._getOption('abortUpload');
    }
    set abortUpload(value) {
        this._setOption('abortUpload', value);
    }
    /**
     * 
    
     */
    get accept() {
        return this._getOption('accept');
    }
    set accept(value) {
        this._setOption('accept', value);
    }
    /**
     * 
    
     */
    get accessKey() {
        return this._getOption('accessKey');
    }
    set accessKey(value) {
        this._setOption('accessKey', value);
    }
    /**
     * 
    
     */
    get activeStateEnabled() {
        return this._getOption('activeStateEnabled');
    }
    set activeStateEnabled(value) {
        this._setOption('activeStateEnabled', value);
    }
    /**
     * 
    
     */
    get allowCanceling() {
        return this._getOption('allowCanceling');
    }
    set allowCanceling(value) {
        this._setOption('allowCanceling', value);
    }
    /**
     * 
    
     */
    get allowedFileExtensions() {
        return this._getOption('allowedFileExtensions');
    }
    set allowedFileExtensions(value) {
        this._setOption('allowedFileExtensions', value);
    }
    /**
     * 
    
     */
    get chunkSize() {
        return this._getOption('chunkSize');
    }
    set chunkSize(value) {
        this._setOption('chunkSize', value);
    }
    /**
     * 
    
     */
    get dialogTrigger() {
        return this._getOption('dialogTrigger');
    }
    set dialogTrigger(value) {
        this._setOption('dialogTrigger', value);
    }
    /**
     * 
    
     */
    get disabled() {
        return this._getOption('disabled');
    }
    set disabled(value) {
        this._setOption('disabled', value);
    }
    /**
     * 
    
     */
    get dropZone() {
        return this._getOption('dropZone');
    }
    set dropZone(value) {
        this._setOption('dropZone', value);
    }
    /**
     * 
    
     */
    get elementAttr() {
        return this._getOption('elementAttr');
    }
    set elementAttr(value) {
        this._setOption('elementAttr', value);
    }
    /**
     * 
    
     */
    get focusStateEnabled() {
        return this._getOption('focusStateEnabled');
    }
    set focusStateEnabled(value) {
        this._setOption('focusStateEnabled', value);
    }
    /**
     * 
    
     */
    get height() {
        return this._getOption('height');
    }
    set height(value) {
        this._setOption('height', value);
    }
    /**
     * 
    
     */
    get hint() {
        return this._getOption('hint');
    }
    set hint(value) {
        this._setOption('hint', value);
    }
    /**
     * 
    
     */
    get hoverStateEnabled() {
        return this._getOption('hoverStateEnabled');
    }
    set hoverStateEnabled(value) {
        this._setOption('hoverStateEnabled', value);
    }
    /**
     * 
    
     */
    get inputAttr() {
        return this._getOption('inputAttr');
    }
    set inputAttr(value) {
        this._setOption('inputAttr', value);
    }
    /**
     * 
    
     */
    get invalidFileExtensionMessage() {
        return this._getOption('invalidFileExtensionMessage');
    }
    set invalidFileExtensionMessage(value) {
        this._setOption('invalidFileExtensionMessage', value);
    }
    /**
     * 
    
     */
    get invalidMaxFileSizeMessage() {
        return this._getOption('invalidMaxFileSizeMessage');
    }
    set invalidMaxFileSizeMessage(value) {
        this._setOption('invalidMaxFileSizeMessage', value);
    }
    /**
     * 
    
     */
    get invalidMinFileSizeMessage() {
        return this._getOption('invalidMinFileSizeMessage');
    }
    set invalidMinFileSizeMessage(value) {
        this._setOption('invalidMinFileSizeMessage', value);
    }
    /**
     * 
    
     */
    get isValid() {
        return this._getOption('isValid');
    }
    set isValid(value) {
        this._setOption('isValid', value);
    }
    /**
     * 
    
     */
    get labelText() {
        return this._getOption('labelText');
    }
    set labelText(value) {
        this._setOption('labelText', value);
    }
    /**
     * 
    
     */
    get maxFileSize() {
        return this._getOption('maxFileSize');
    }
    set maxFileSize(value) {
        this._setOption('maxFileSize', value);
    }
    /**
     * 
    
     */
    get minFileSize() {
        return this._getOption('minFileSize');
    }
    set minFileSize(value) {
        this._setOption('minFileSize', value);
    }
    /**
     * 
    
     */
    get multiple() {
        return this._getOption('multiple');
    }
    set multiple(value) {
        this._setOption('multiple', value);
    }
    /**
     * 
    
     */
    get name() {
        return this._getOption('name');
    }
    set name(value) {
        this._setOption('name', value);
    }
    /**
     * 
    
     */
    get progress() {
        return this._getOption('progress');
    }
    set progress(value) {
        this._setOption('progress', value);
    }
    /**
     * 
    
     */
    get readOnly() {
        return this._getOption('readOnly');
    }
    set readOnly(value) {
        this._setOption('readOnly', value);
    }
    /**
     * 
    
     */
    get readyToUploadMessage() {
        return this._getOption('readyToUploadMessage');
    }
    set readyToUploadMessage(value) {
        this._setOption('readyToUploadMessage', value);
    }
    /**
     * 
    
     */
    get rtlEnabled() {
        return this._getOption('rtlEnabled');
    }
    set rtlEnabled(value) {
        this._setOption('rtlEnabled', value);
    }
    /**
     * 
    
     */
    get selectButtonText() {
        return this._getOption('selectButtonText');
    }
    set selectButtonText(value) {
        this._setOption('selectButtonText', value);
    }
    /**
     * 
    
     */
    get showFileList() {
        return this._getOption('showFileList');
    }
    set showFileList(value) {
        this._setOption('showFileList', value);
    }
    /**
     * 
    
     */
    get tabIndex() {
        return this._getOption('tabIndex');
    }
    set tabIndex(value) {
        this._setOption('tabIndex', value);
    }
    /**
     * 
    
     */
    get uploadAbortedMessage() {
        return this._getOption('uploadAbortedMessage');
    }
    set uploadAbortedMessage(value) {
        this._setOption('uploadAbortedMessage', value);
    }
    /**
     * 
    
     */
    get uploadButtonText() {
        return this._getOption('uploadButtonText');
    }
    set uploadButtonText(value) {
        this._setOption('uploadButtonText', value);
    }
    /**
     * 
    
     */
    get uploadChunk() {
        return this._getOption('uploadChunk');
    }
    set uploadChunk(value) {
        this._setOption('uploadChunk', value);
    }
    /**
     * 
    
     */
    get uploadCustomData() {
        return this._getOption('uploadCustomData');
    }
    set uploadCustomData(value) {
        this._setOption('uploadCustomData', value);
    }
    /**
     * 
    
     */
    get uploadedMessage() {
        return this._getOption('uploadedMessage');
    }
    set uploadedMessage(value) {
        this._setOption('uploadedMessage', value);
    }
    /**
     * 
    
     */
    get uploadFailedMessage() {
        return this._getOption('uploadFailedMessage');
    }
    set uploadFailedMessage(value) {
        this._setOption('uploadFailedMessage', value);
    }
    /**
     * 
    
     */
    get uploadFile() {
        return this._getOption('uploadFile');
    }
    set uploadFile(value) {
        this._setOption('uploadFile', value);
    }
    /**
     * 
    
     */
    get uploadHeaders() {
        return this._getOption('uploadHeaders');
    }
    set uploadHeaders(value) {
        this._setOption('uploadHeaders', value);
    }
    /**
     * 
    
     */
    get uploadMethod() {
        return this._getOption('uploadMethod');
    }
    set uploadMethod(value) {
        this._setOption('uploadMethod', value);
    }
    /**
     * 
    
     */
    get uploadMode() {
        return this._getOption('uploadMode');
    }
    set uploadMode(value) {
        this._setOption('uploadMode', value);
    }
    /**
     * 
    
     */
    get uploadUrl() {
        return this._getOption('uploadUrl');
    }
    set uploadUrl(value) {
        this._setOption('uploadUrl', value);
    }
    /**
     * 
    
     */
    get validationError() {
        return this._getOption('validationError');
    }
    set validationError(value) {
        this._setOption('validationError', value);
    }
    /**
     * 
    
     */
    get validationErrors() {
        return this._getOption('validationErrors');
    }
    set validationErrors(value) {
        this._setOption('validationErrors', value);
    }
    /**
     * 
    
     */
    get validationStatus() {
        return this._getOption('validationStatus');
    }
    set validationStatus(value) {
        this._setOption('validationStatus', value);
    }
    /**
     * 
    
     */
    get value() {
        return this._getOption('value');
    }
    set value(value) {
        this._setOption('value', value);
    }
    /**
     * 
    
     */
    get visible() {
        return this._getOption('visible');
    }
    set visible(value) {
        this._setOption('visible', value);
    }
    /**
     * 
    
     */
    get width() {
        return this._getOption('width');
    }
    set width(value) {
        this._setOption('width', value);
    }
    change(_) { }
    _createInstance(element, options) {
        return new DxFileUploader(element, options);
    }
    writeValue(value) {
        this.eventHelper.lockedValueChangeEvent = true;
        this.value = value;
        this.eventHelper.lockedValueChangeEvent = false;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) { this.change = fn; }
    registerOnTouched(fn) { this.touched = fn; }
    _createWidget(element) {
        super._createWidget(element);
        this.instance.on('focusOut', (e) => {
            this.eventHelper.fireNgEvent('onBlur', [e]);
        });
    }
    ngOnDestroy() {
        this._destroyWidget();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        this.setupChanges('allowedFileExtensions', changes);
        this.setupChanges('validationErrors', changes);
        this.setupChanges('value', changes);
    }
    setupChanges(prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    }
    ngDoCheck() {
        this._idh.doCheck('allowedFileExtensions');
        this._idh.doCheck('validationErrors');
        this._idh.doCheck('value');
        this._watcherHelper.checkWatchers();
        super.ngDoCheck();
        super.clearChangedOptions();
    }
    _setOption(name, value) {
        let isSetup = this._idh.setupSingle(name, value);
        let isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            super._setOption(name, value);
        }
    }
};
DxFileUploaderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: DxTemplateHost },
    { type: WatcherHelper },
    { type: IterableDifferHelper },
    { type: NestedOptionHost },
    { type: TransferState },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], DxFileUploaderComponent.prototype, "abortUpload", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "accept", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "accessKey", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileUploaderComponent.prototype, "activeStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileUploaderComponent.prototype, "allowCanceling", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxFileUploaderComponent.prototype, "allowedFileExtensions", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxFileUploaderComponent.prototype, "chunkSize", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileUploaderComponent.prototype, "dialogTrigger", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileUploaderComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileUploaderComponent.prototype, "dropZone", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileUploaderComponent.prototype, "elementAttr", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileUploaderComponent.prototype, "focusStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileUploaderComponent.prototype, "height", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "hint", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileUploaderComponent.prototype, "hoverStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileUploaderComponent.prototype, "inputAttr", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "invalidFileExtensionMessage", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "invalidMaxFileSizeMessage", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "invalidMinFileSizeMessage", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileUploaderComponent.prototype, "isValid", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "labelText", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxFileUploaderComponent.prototype, "maxFileSize", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxFileUploaderComponent.prototype, "minFileSize", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileUploaderComponent.prototype, "multiple", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "name", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxFileUploaderComponent.prototype, "progress", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileUploaderComponent.prototype, "readOnly", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "readyToUploadMessage", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileUploaderComponent.prototype, "rtlEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "selectButtonText", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileUploaderComponent.prototype, "showFileList", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxFileUploaderComponent.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "uploadAbortedMessage", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "uploadButtonText", null);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], DxFileUploaderComponent.prototype, "uploadChunk", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileUploaderComponent.prototype, "uploadCustomData", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "uploadedMessage", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "uploadFailedMessage", null);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], DxFileUploaderComponent.prototype, "uploadFile", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileUploaderComponent.prototype, "uploadHeaders", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "uploadMethod", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "uploadMode", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "uploadUrl", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileUploaderComponent.prototype, "validationError", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxFileUploaderComponent.prototype, "validationErrors", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileUploaderComponent.prototype, "validationStatus", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxFileUploaderComponent.prototype, "value", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileUploaderComponent.prototype, "visible", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileUploaderComponent.prototype, "width", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onBeforeSend", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onContentReady", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onDisposing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onDropZoneEnter", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onDropZoneLeave", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onFilesUploaded", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onInitialized", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onOptionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onProgress", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onUploadAborted", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onUploaded", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onUploadError", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onUploadStarted", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onValueChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "abortUploadChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "acceptChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "accessKeyChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "activeStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "allowCancelingChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "allowedFileExtensionsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "chunkSizeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "dialogTriggerChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "disabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "dropZoneChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "elementAttrChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "focusStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "heightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "hintChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "hoverStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "inputAttrChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "invalidFileExtensionMessageChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "invalidMaxFileSizeMessageChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "invalidMinFileSizeMessageChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "isValidChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "labelTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "maxFileSizeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "minFileSizeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "multipleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "nameChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "progressChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "readOnlyChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "readyToUploadMessageChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "rtlEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "selectButtonTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "showFileListChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "tabIndexChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "uploadAbortedMessageChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "uploadButtonTextChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "uploadChunkChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "uploadCustomDataChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "uploadedMessageChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "uploadFailedMessageChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "uploadFileChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "uploadHeadersChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "uploadMethodChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "uploadModeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "uploadUrlChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "validationErrorChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "validationErrorsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "validationStatusChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "valueChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "visibleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "widthChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileUploaderComponent.prototype, "onBlur", void 0);
__decorate([
    HostListener('valueChange', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], DxFileUploaderComponent.prototype, "change", null);
__decorate([
    HostListener('onBlur', ['$event']),
    __metadata("design:type", Object)
], DxFileUploaderComponent.prototype, "touched", void 0);
DxFileUploaderComponent = __decorate([
    Component({
        selector: 'dx-file-uploader',
        template: '',
        providers: [
            DxTemplateHost,
            WatcherHelper,
            CUSTOM_VALUE_ACCESSOR_PROVIDER,
            NestedOptionHost,
            IterableDifferHelper
        ]
    }),
    __param(7, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
        WatcherHelper,
        IterableDifferHelper,
        NestedOptionHost,
        TransferState, Object])
], DxFileUploaderComponent);
let DxFileUploaderModule = class DxFileUploaderModule {
};
DxFileUploaderModule = __decorate([
    NgModule({
        imports: [
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ],
        declarations: [
            DxFileUploaderComponent
        ],
        exports: [
            DxFileUploaderComponent,
            DxTemplateModule
        ]
    })
], DxFileUploaderModule);

/**
 * Generated bundle index. Do not edit.
 */

export { DxFileUploaderComponent, DxFileUploaderModule };
//# sourceMappingURL=devextreme-angular-ui-file-uploader.js.map
