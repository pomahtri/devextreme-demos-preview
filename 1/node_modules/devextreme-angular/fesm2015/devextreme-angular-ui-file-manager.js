import { __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';
import DxFileManager from 'devextreme/ui/file_manager';
import { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxoContextMenuModule, DxiItemModule, DxoItemViewModule, DxoDetailsModule, DxiColumnModule, DxoNotificationsModule, DxoPermissionsModule, DxoToolbarModule, DxiFileSelectionItemModule, DxoUploadModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 21.2.1-alpha-21124-0324
 * Build date: Tue May 04 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/**
 * The FileManager is a UI component that allows users to upload, select, and manage files and directories in different file storages.

 */
let DxFileManagerComponent = class DxFileManagerComponent extends DxComponent {
    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);
        this._watcherHelper = _watcherHelper;
        this._idh = _idh;
        this._createEventEmitters([
            { subscribe: 'contentReady', emit: 'onContentReady' },
            { subscribe: 'contextMenuItemClick', emit: 'onContextMenuItemClick' },
            { subscribe: 'contextMenuShowing', emit: 'onContextMenuShowing' },
            { subscribe: 'currentDirectoryChanged', emit: 'onCurrentDirectoryChanged' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'errorOccurred', emit: 'onErrorOccurred' },
            { subscribe: 'focusedItemChanged', emit: 'onFocusedItemChanged' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'selectedFileOpened', emit: 'onSelectedFileOpened' },
            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
            { subscribe: 'toolbarItemClick', emit: 'onToolbarItemClick' },
            { emit: 'accessKeyChange' },
            { emit: 'activeStateEnabledChange' },
            { emit: 'allowedFileExtensionsChange' },
            { emit: 'contextMenuChange' },
            { emit: 'currentPathChange' },
            { emit: 'currentPathKeysChange' },
            { emit: 'customizeDetailColumnsChange' },
            { emit: 'customizeThumbnailChange' },
            { emit: 'disabledChange' },
            { emit: 'elementAttrChange' },
            { emit: 'fileSystemProviderChange' },
            { emit: 'focusedItemKeyChange' },
            { emit: 'focusStateEnabledChange' },
            { emit: 'heightChange' },
            { emit: 'hintChange' },
            { emit: 'hoverStateEnabledChange' },
            { emit: 'itemViewChange' },
            { emit: 'notificationsChange' },
            { emit: 'permissionsChange' },
            { emit: 'rootFolderNameChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'selectedItemKeysChange' },
            { emit: 'selectionModeChange' },
            { emit: 'tabIndexChange' },
            { emit: 'toolbarChange' },
            { emit: 'uploadChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' }
        ]);
        this._idh.setHost(this);
        optionHost.setHost(this);
    }
    /**
     * 
    
     */
    get accessKey() {
        return this._getOption('accessKey');
    }
    set accessKey(value) {
        this._setOption('accessKey', value);
    }
    /**
     * 
    
     */
    get activeStateEnabled() {
        return this._getOption('activeStateEnabled');
    }
    set activeStateEnabled(value) {
        this._setOption('activeStateEnabled', value);
    }
    /**
     * 
    
     */
    get allowedFileExtensions() {
        return this._getOption('allowedFileExtensions');
    }
    set allowedFileExtensions(value) {
        this._setOption('allowedFileExtensions', value);
    }
    /**
     * 
    
     */
    get contextMenu() {
        return this._getOption('contextMenu');
    }
    set contextMenu(value) {
        this._setOption('contextMenu', value);
    }
    /**
     * 
    
     */
    get currentPath() {
        return this._getOption('currentPath');
    }
    set currentPath(value) {
        this._setOption('currentPath', value);
    }
    /**
     * 
    
     */
    get currentPathKeys() {
        return this._getOption('currentPathKeys');
    }
    set currentPathKeys(value) {
        this._setOption('currentPathKeys', value);
    }
    /**
     * 
    
     */
    get customizeDetailColumns() {
        return this._getOption('customizeDetailColumns');
    }
    set customizeDetailColumns(value) {
        this._setOption('customizeDetailColumns', value);
    }
    /**
     * 
    
     */
    get customizeThumbnail() {
        return this._getOption('customizeThumbnail');
    }
    set customizeThumbnail(value) {
        this._setOption('customizeThumbnail', value);
    }
    /**
     * 
    
     */
    get disabled() {
        return this._getOption('disabled');
    }
    set disabled(value) {
        this._setOption('disabled', value);
    }
    /**
     * 
    
     */
    get elementAttr() {
        return this._getOption('elementAttr');
    }
    set elementAttr(value) {
        this._setOption('elementAttr', value);
    }
    /**
     * 
    
     */
    get fileSystemProvider() {
        return this._getOption('fileSystemProvider');
    }
    set fileSystemProvider(value) {
        this._setOption('fileSystemProvider', value);
    }
    /**
     * 
    
     */
    get focusedItemKey() {
        return this._getOption('focusedItemKey');
    }
    set focusedItemKey(value) {
        this._setOption('focusedItemKey', value);
    }
    /**
     * 
    
     */
    get focusStateEnabled() {
        return this._getOption('focusStateEnabled');
    }
    set focusStateEnabled(value) {
        this._setOption('focusStateEnabled', value);
    }
    /**
     * 
    
     */
    get height() {
        return this._getOption('height');
    }
    set height(value) {
        this._setOption('height', value);
    }
    /**
     * 
    
     */
    get hint() {
        return this._getOption('hint');
    }
    set hint(value) {
        this._setOption('hint', value);
    }
    /**
     * 
    
     */
    get hoverStateEnabled() {
        return this._getOption('hoverStateEnabled');
    }
    set hoverStateEnabled(value) {
        this._setOption('hoverStateEnabled', value);
    }
    /**
     * 
    
     */
    get itemView() {
        return this._getOption('itemView');
    }
    set itemView(value) {
        this._setOption('itemView', value);
    }
    /**
     * 
    
     */
    get notifications() {
        return this._getOption('notifications');
    }
    set notifications(value) {
        this._setOption('notifications', value);
    }
    /**
     * 
    
     */
    get permissions() {
        return this._getOption('permissions');
    }
    set permissions(value) {
        this._setOption('permissions', value);
    }
    /**
     * 
    
     */
    get rootFolderName() {
        return this._getOption('rootFolderName');
    }
    set rootFolderName(value) {
        this._setOption('rootFolderName', value);
    }
    /**
     * 
    
     */
    get rtlEnabled() {
        return this._getOption('rtlEnabled');
    }
    set rtlEnabled(value) {
        this._setOption('rtlEnabled', value);
    }
    /**
     * 
    
     */
    get selectedItemKeys() {
        return this._getOption('selectedItemKeys');
    }
    set selectedItemKeys(value) {
        this._setOption('selectedItemKeys', value);
    }
    /**
     * 
    
     */
    get selectionMode() {
        return this._getOption('selectionMode');
    }
    set selectionMode(value) {
        this._setOption('selectionMode', value);
    }
    /**
     * 
    
     */
    get tabIndex() {
        return this._getOption('tabIndex');
    }
    set tabIndex(value) {
        this._setOption('tabIndex', value);
    }
    /**
     * 
    
     */
    get toolbar() {
        return this._getOption('toolbar');
    }
    set toolbar(value) {
        this._setOption('toolbar', value);
    }
    /**
     * 
    
     */
    get upload() {
        return this._getOption('upload');
    }
    set upload(value) {
        this._setOption('upload', value);
    }
    /**
     * 
    
     */
    get visible() {
        return this._getOption('visible');
    }
    set visible(value) {
        this._setOption('visible', value);
    }
    /**
     * 
    
     */
    get width() {
        return this._getOption('width');
    }
    set width(value) {
        this._setOption('width', value);
    }
    _createInstance(element, options) {
        return new DxFileManager(element, options);
    }
    ngOnDestroy() {
        this._destroyWidget();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        this.setupChanges('allowedFileExtensions', changes);
        this.setupChanges('currentPathKeys', changes);
        this.setupChanges('selectedItemKeys', changes);
    }
    setupChanges(prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    }
    ngDoCheck() {
        this._idh.doCheck('allowedFileExtensions');
        this._idh.doCheck('currentPathKeys');
        this._idh.doCheck('selectedItemKeys');
        this._watcherHelper.checkWatchers();
        super.ngDoCheck();
        super.clearChangedOptions();
    }
    _setOption(name, value) {
        let isSetup = this._idh.setupSingle(name, value);
        let isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            super._setOption(name, value);
        }
    }
};
DxFileManagerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: DxTemplateHost },
    { type: WatcherHelper },
    { type: IterableDifferHelper },
    { type: NestedOptionHost },
    { type: TransferState },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "accessKey", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "activeStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxFileManagerComponent.prototype, "allowedFileExtensions", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "contextMenu", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "currentPath", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxFileManagerComponent.prototype, "currentPathKeys", null);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], DxFileManagerComponent.prototype, "customizeDetailColumns", null);
__decorate([
    Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], DxFileManagerComponent.prototype, "customizeThumbnail", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "elementAttr", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "fileSystemProvider", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "focusedItemKey", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "focusStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "height", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "hint", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "hoverStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "itemView", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "notifications", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "permissions", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "rootFolderName", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "rtlEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxFileManagerComponent.prototype, "selectedItemKeys", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxFileManagerComponent.prototype, "selectionMode", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxFileManagerComponent.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "toolbar", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "upload", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxFileManagerComponent.prototype, "visible", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxFileManagerComponent.prototype, "width", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onContentReady", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onContextMenuItemClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onContextMenuShowing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onCurrentDirectoryChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onDisposing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onErrorOccurred", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onFocusedItemChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onInitialized", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onOptionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onSelectedFileOpened", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onSelectionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "onToolbarItemClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "accessKeyChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "activeStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "allowedFileExtensionsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "contextMenuChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "currentPathChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "currentPathKeysChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "customizeDetailColumnsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "customizeThumbnailChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "disabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "elementAttrChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "fileSystemProviderChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "focusedItemKeyChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "focusStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "heightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "hintChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "hoverStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "itemViewChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "notificationsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "permissionsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "rootFolderNameChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "rtlEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "selectedItemKeysChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "selectionModeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "tabIndexChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "toolbarChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "uploadChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "visibleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxFileManagerComponent.prototype, "widthChange", void 0);
DxFileManagerComponent = __decorate([
    Component({
        selector: 'dx-file-manager',
        template: '',
        providers: [
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper
        ]
    }),
    __param(7, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
        WatcherHelper,
        IterableDifferHelper,
        NestedOptionHost,
        TransferState, Object])
], DxFileManagerComponent);
let DxFileManagerModule = class DxFileManagerModule {
};
DxFileManagerModule = __decorate([
    NgModule({
        imports: [
            DxoContextMenuModule,
            DxiItemModule,
            DxoItemViewModule,
            DxoDetailsModule,
            DxiColumnModule,
            DxoNotificationsModule,
            DxoPermissionsModule,
            DxoToolbarModule,
            DxiFileSelectionItemModule,
            DxoUploadModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ],
        declarations: [
            DxFileManagerComponent
        ],
        exports: [
            DxFileManagerComponent,
            DxoContextMenuModule,
            DxiItemModule,
            DxoItemViewModule,
            DxoDetailsModule,
            DxiColumnModule,
            DxoNotificationsModule,
            DxoPermissionsModule,
            DxoToolbarModule,
            DxiFileSelectionItemModule,
            DxoUploadModule,
            DxTemplateModule
        ]
    })
], DxFileManagerModule);

/**
 * Generated bundle index. Do not edit.
 */

export { DxFileManagerComponent, DxFileManagerModule };
//# sourceMappingURL=devextreme-angular-ui-file-manager.js.map
