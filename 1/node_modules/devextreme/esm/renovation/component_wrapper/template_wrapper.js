/**
 * DevExtreme (esm/renovation/component_wrapper/template_wrapper.js)
 * Version: 21.1.2 (build 21124-0324)
 * Build date: Tue May 04 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import {
    InfernoComponent,
    InfernoEffect
} from "@devextreme/vdom";
import {
    createElement
} from "inferno-create-element";
import {
    createRef
} from "inferno";
import $ from "../../core/renderer";
import domAdapter from "../../core/dom_adapter";
import {
    getPublicElement
} from "../../core/element";
import {
    removeDifferentElements
} from "./utils";
import Number from "../../core/polyfills/number";
export class TemplateWrapper extends InfernoComponent {
    constructor(props) {
        super(props);
        this.dummyDivRef = createRef();
        this.renderTemplate = this.renderTemplate.bind(this)
    }
    renderTemplate() {
        var {
            parentNode: parentNode
        } = this.dummyDivRef.current;
        null === parentNode || void 0 === parentNode ? void 0 : parentNode.removeChild(this.dummyDivRef.current);
        var $parent = $(parentNode);
        var $children = $parent.contents();
        var {
            data: data,
            index: index
        } = this.props.model;
        Object.keys(data).forEach(name => {
            if (data[name] && domAdapter.isNode(data[name])) {
                data[name] = getPublicElement($(data[name]))
            }
        });
        this.props.template.render(_extends({
            container: getPublicElement($parent),
            model: data
        }, Number.isFinite(index) ? {
            index: index
        } : {}));
        return () => {
            removeDifferentElements($children, $parent.contents());
            parentNode.appendChild(this.dummyDivRef.current)
        }
    }
    createEffects() {
        return [new InfernoEffect(this.renderTemplate, [this.props.template])]
    }
    updateEffects() {
        this._effects[0].update([this.props.template])
    }
    render() {
        return createElement("div", {
            style: {
                display: "none"
            },
            ref: this.dummyDivRef
        })
    }
}
