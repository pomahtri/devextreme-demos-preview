/**
 * DevExtreme (esm/renovation/ui/grids/data_grid/data_grid.j.js)
 * Version: 21.1.2 (build 21124-0324)
 * Build date: Tue May 04 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import registerComponent from "../../../../core/component_registrator";
import DataGridBaseComponent from "../../../component_wrapper/data_grid";
import {
    DataGrid as DataGridComponent
} from "./data_grid";
export default class DataGrid extends DataGridBaseComponent {
    getProps() {
        var props = super.getProps();
        props.rowTemplate = this._createTemplateComponent(props, props.rowTemplate);
        props.onKeyDown = this._wrapKeyDownHandler(props.onKeyDown);
        return props
    }
    getComponentInstance() {
        return this.viewRef.getComponentInstance()
    }
    beginCustomLoading(messageText) {
        return this.viewRef.beginCustomLoading(messageText)
    }
    byKey(key) {
        return this.viewRef.byKey(key)
    }
    cancelEditData() {
        return this.viewRef.cancelEditData()
    }
    cellValue(rowIndex, dataField, value) {
        return this.viewRef.cellValue(rowIndex, dataField, value)
    }
    clearFilter(filterName) {
        return this.viewRef.clearFilter(filterName)
    }
    clearSelection() {
        return this.viewRef.clearSelection()
    }
    clearSorting() {
        return this.viewRef.clearSorting()
    }
    closeEditCell() {
        return this.viewRef.closeEditCell()
    }
    collapseAdaptiveDetailRow() {
        return this.viewRef.collapseAdaptiveDetailRow()
    }
    columnCount() {
        return this.viewRef.columnCount()
    }
    columnOption(id, optionName, optionValue) {
        return this.viewRef.columnOption(id, optionName, optionValue)
    }
    deleteColumn(id) {
        return this.viewRef.deleteColumn(id)
    }
    deleteRow(rowIndex) {
        return this.viewRef.deleteRow(rowIndex)
    }
    deselectAll() {
        return this.viewRef.deselectAll()
    }
    deselectRows(keys) {
        return this.viewRef.deselectRows(keys)
    }
    editCell(rowIndex, dataFieldColumnIndex) {
        return this.viewRef.editCell(rowIndex, dataFieldColumnIndex)
    }
    editRow(rowIndex) {
        return this.viewRef.editRow(rowIndex)
    }
    endCustomLoading() {
        return this.viewRef.endCustomLoading()
    }
    expandAdaptiveDetailRow(key) {
        return this.viewRef.expandAdaptiveDetailRow(key)
    }
    filter(filterExpr) {
        return this.viewRef.filter(filterExpr)
    }
    focus(element) {
        return this.viewRef.focus(this._patchElementParam(element))
    }
    getCellElement(rowIndex, dataField) {
        return this.viewRef.getCellElement(rowIndex, dataField)
    }
    getCombinedFilter(returnDataField) {
        return this.viewRef.getCombinedFilter(returnDataField)
    }
    getDataSource() {
        return this.viewRef.getDataSource()
    }
    getKeyByRowIndex(rowIndex) {
        return this.viewRef.getKeyByRowIndex(rowIndex)
    }
    getRowElement(rowIndex) {
        return this.viewRef.getRowElement(rowIndex)
    }
    getRowIndexByKey(key) {
        return this.viewRef.getRowIndexByKey(key)
    }
    getScrollable() {
        return this.viewRef.getScrollable()
    }
    getVisibleColumnIndex(id) {
        return this.viewRef.getVisibleColumnIndex(id)
    }
    hasEditData() {
        return this.viewRef.hasEditData()
    }
    hideColumnChooser() {
        return this.viewRef.hideColumnChooser()
    }
    isAdaptiveDetailRowExpanded(key) {
        return this.viewRef.isAdaptiveDetailRowExpanded(key)
    }
    isRowFocused(key) {
        return this.viewRef.isRowFocused(key)
    }
    isRowSelected(key) {
        return this.viewRef.isRowSelected(key)
    }
    keyOf(obj) {
        return this.viewRef.keyOf(obj)
    }
    navigateToRow(key) {
        return this.viewRef.navigateToRow(key)
    }
    pageCount() {
        return this.viewRef.pageCount()
    }
    pageIndex(newIndex) {
        return this.viewRef.pageIndex(newIndex)
    }
    pageSize(value) {
        return this.viewRef.pageSize(value)
    }
    refresh(changesOnly) {
        return this.viewRef.refresh(changesOnly)
    }
    repaintRows(rowIndexes) {
        return this.viewRef.repaintRows(rowIndexes)
    }
    saveEditData() {
        return this.viewRef.saveEditData()
    }
    searchByText(text) {
        return this.viewRef.searchByText(text)
    }
    selectAll() {
        return this.viewRef.selectAll()
    }
    selectRows(keys, preserve) {
        return this.viewRef.selectRows(keys, preserve)
    }
    selectRowsByIndexes(indexes) {
        return this.viewRef.selectRowsByIndexes(indexes)
    }
    showColumnChooser() {
        return this.viewRef.showColumnChooser()
    }
    undeleteRow(rowIndex) {
        return this.viewRef.undeleteRow(rowIndex)
    }
    updateDimensions() {
        return this.viewRef.updateDimensions()
    }
    resize() {
        return this.viewRef.resize()
    }
    addColumn(columnOptions) {
        return this.viewRef.addColumn(columnOptions)
    }
    addRow() {
        return this.viewRef.addRow()
    }
    clearGrouping() {
        return this.viewRef.clearGrouping()
    }
    collapseAll(groupIndex) {
        return this.viewRef.collapseAll(groupIndex)
    }
    collapseRow(key) {
        return this.viewRef.collapseRow(key)
    }
    expandAll(groupIndex) {
        return this.viewRef.expandAll(groupIndex)
    }
    expandRow(key) {
        return this.viewRef.expandRow(key)
    }
    exportToExcel(selectionOnly) {
        return this.viewRef.exportToExcel(selectionOnly)
    }
    getSelectedRowKeys() {
        return this.viewRef.getSelectedRowKeys()
    }
    getSelectedRowsData() {
        return this.viewRef.getSelectedRowsData()
    }
    getTotalSummaryValue(summaryItemName) {
        return this.viewRef.getTotalSummaryValue(summaryItemName)
    }
    getVisibleColumns(headerLevel) {
        return this.viewRef.getVisibleColumns(headerLevel)
    }
    getVisibleRows() {
        return this.viewRef.getVisibleRows()
    }
    isRowExpanded(key) {
        return this.viewRef.isRowExpanded(key)
    }
    totalCount() {
        return this.viewRef.totalCount()
    }
    isScrollbarVisible() {
        return this.viewRef.isScrollbarVisible()
    }
    getTopVisibleRowData() {
        return this.viewRef.getTopVisibleRowData()
    }
    getScrollbarWidth(isHorizontal) {
        return this.viewRef.getScrollbarWidth(isHorizontal)
    }
    _getActionConfigs() {
        return {
            onCellClick: {},
            onCellDblClick: {},
            onCellHoverChanged: {},
            onCellPrepared: {},
            onContextMenuPreparing: {},
            onEditingStart: {},
            onEditorPrepared: {},
            onEditorPreparing: {},
            onExported: {},
            onExporting: {},
            onFileSaving: {},
            onFocusedCellChanged: {},
            onFocusedCellChanging: {},
            onFocusedRowChanged: {},
            onFocusedRowChanging: {},
            onRowClick: {},
            onRowDblClick: {},
            onRowPrepared: {},
            onAdaptiveDetailRowPreparing: {},
            onDataErrorOccurred: {},
            onInitNewRow: {},
            onRowCollapsed: {},
            onRowCollapsing: {},
            onRowExpanded: {},
            onRowExpanding: {},
            onRowInserted: {},
            onRowInserting: {},
            onRowRemoved: {},
            onRowRemoving: {},
            onRowUpdated: {},
            onRowUpdating: {},
            onRowValidating: {},
            onSelectionChanged: {},
            onToolbarPreparing: {},
            onClick: {},
            onContentReady: {
                excludeValidators: ["disabled", "readOnly"]
            }
        }
    }
    get _propsInfo() {
        return {
            twoWay: [
                ["filterValue", [], "filterValueChange"],
                ["focusedColumnIndex", -1, "focusedColumnIndexChange"],
                ["focusedRowIndex", -1, "focusedRowIndexChange"],
                ["focusedRowKey", null, "focusedRowKeyChange"],
                ["selectedRowKeys", [], "selectedRowKeysChange"],
                ["selectionFilter", [], "selectionFilterChange"]
            ],
            allowNull: ["defaultFocusedRowKey", "focusedRowKey"],
            elements: [],
            templates: ["rowTemplate"],
            props: ["columns", "editing", "export", "groupPanel", "grouping", "masterDetail", "scrolling", "selection", "sortByGroupSummaryInfo", "summary", "columnChooser", "columnFixing", "filterPanel", "filterRow", "headerFilter", "useKeyboard", "keyboardNavigation", "loadPanel", "pager", "paging", "rowDragging", "searchPanel", "sorting", "stateStoring", "rowTemplate", "customizeColumns", "customizeExportData", "keyExpr", "remoteOperations", "allowColumnReordering", "allowColumnResizing", "autoNavigateToFocusedRow", "cacheEnabled", "cellHintEnabled", "columnAutoWidth", "columnHidingEnabled", "columnMinWidth", "columnResizingMode", "columnWidth", "dataSource", "dateSerializationFormat", "errorRowEnabled", "filterBuilder", "filterBuilderPopup", "filterSyncEnabled", "focusedRowEnabled", "highlightChanges", "noDataText", "renderAsync", "repaintChangesOnly", "rowAlternationEnabled", "showBorders", "showColumnHeaders", "showColumnLines", "showRowLines", "twoWayBindingEnabled", "wordWrapEnabled", "loadingTimeout", "commonColumnSettings", "onCellClick", "onCellDblClick", "onCellHoverChanged", "onCellPrepared", "onContextMenuPreparing", "onEditingStart", "onEditorPrepared", "onEditorPreparing", "onExported", "onExporting", "onFileSaving", "onFocusedCellChanged", "onFocusedCellChanging", "onFocusedRowChanged", "onFocusedRowChanging", "onRowClick", "onRowDblClick", "onRowPrepared", "onAdaptiveDetailRowPreparing", "onDataErrorOccurred", "onInitNewRow", "onKeyDown", "onRowCollapsed", "onRowCollapsing", "onRowExpanded", "onRowExpanding", "onRowInserted", "onRowInserting", "onRowRemoved", "onRowRemoving", "onRowUpdated", "onRowUpdating", "onRowValidating", "onSelectionChanged", "onToolbarPreparing", "defaultFilterValue", "filterValueChange", "defaultFocusedColumnIndex", "focusedColumnIndexChange", "defaultFocusedRowIndex", "focusedRowIndexChange", "defaultFocusedRowKey", "focusedRowKeyChange", "defaultSelectedRowKeys", "selectedRowKeysChange", "defaultSelectionFilter", "selectionFilterChange", "accessKey", "activeStateEnabled", "disabled", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "onClick", "onContentReady", "rtlEnabled", "tabIndex", "visible", "width", "filterValue", "focusedColumnIndex", "focusedRowIndex", "focusedRowKey", "selectedRowKeys", "selectionFilter"]
        }
    }
    get _viewComponent() {
        return DataGridComponent
    }
}
registerComponent("dxDataGrid", DataGrid);
